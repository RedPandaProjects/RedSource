#ifndef _MMatrix
#define _MMatrix
//
//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc., and/or its licensors.  All 
// rights reserved.
// 
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors,  which is protected by U.S. and Canadian federal copyright law 
// and by international treaties.
// 
// The Data may not be disclosed or distributed to third parties or be 
// copied or duplicated, in whole or in part, without the prior written 
// consent of Autodesk.
// 
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the following 
// disclaimer, must be included in all copies of the Software, in whole 
// or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object 
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO 
// EVENT WILL AUTODESK AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST 
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR 
// CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS LICENSORS HAS 
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES. 
// ==========================================================================
//+
//
// CLASS:    MMatrix
//
// *****************************************************************************
//
// CLASS DESCRIPTION (MMatrix)
//
//	This class provides access to Maya's internal matrix math library allowing
//	matrices to be handled easily, and in a manner compatible with internal
//	Maya data structures.
//
// *****************************************************************************

#if defined __cplusplus

// *****************************************************************************

// INCLUDED HEADER FILES



#include <maya/MStatus.h>
#include <maya/MTypes.h>

// *****************************************************************************

// DECLARATIONS

#define MMatrix_kTol	1.0e-10

// *****************************************************************************

// CLASS DECLARATION (MMatrix)

/// A matrix math class for 4x4 matrices of doubles
/**
  This class provides access to Maya's matrix math library
*/
#ifdef _WIN32
#pragma warning(disable: 4522)
#endif // _WIN32

class OPENMAYA_EXPORT MMatrix  
{

public:
	///
					MMatrix();
	///
					MMatrix( const MMatrix & src );
	///
					MMatrix( const double m[4][4] );
	///
					MMatrix( const float m[4][4] );
	///
					~MMatrix();
	///
 	MMatrix&		operator = (const MMatrix &);
	///
	double&			operator()(unsigned int row, unsigned int col );
	///
	double			operator()(unsigned int row, unsigned int col ) const;
	///
	double* 		operator[]( unsigned int row );
	///
	const double* 	operator[]( unsigned int row ) const;
	///
	MStatus			get( double dest[4][4] ) const;
	///
	MStatus			get( float dest[4][4] ) const;
	///
 	MMatrix     	transpose() const;
	///
 	MMatrix &   	setToIdentity();
	///
 	MMatrix &   	setToProduct( const MMatrix & left,
				 		const MMatrix & right );
	///
 	MMatrix &   	operator+=( const MMatrix & right );
	///
 	MMatrix  		operator+ ( const MMatrix & right ) const;
	///
 	MMatrix &   	operator-=( const MMatrix & right );
	///
 	MMatrix  		operator- ( const MMatrix & right ) const;
	///
 	MMatrix &   	operator*=( const MMatrix & right );
	///
 	MMatrix     	operator* ( const MMatrix & right ) const;
	///
 	MMatrix &   	operator*=( double );
	///
 	MMatrix     	operator* ( double ) const;
	///
 	friend OPENMAYA_EXPORT MMatrix operator* ( double, const MMatrix & right );
	///
 	bool          	operator==( const MMatrix & other ) const;
	///
 	bool           	operator!=( const MMatrix & other ) const;
	///
 	MMatrix     	inverse() const;
	///
 	MMatrix     	adjoint() const;
	///
 	MMatrix     	homogenize() const;
	///
 	double       	det4x4() const;
	///
 	double         	det3x3() const;
	///
 	bool           	isEquivalent( const MMatrix & other,
				 		double tolerance = MMatrix_kTol ) const;
	///
	bool			isSingular() const;

	///
	friend OPENMAYA_EXPORT IOS_REF(ostream)&	operator<<(IOS_REF(ostream)& os, const MMatrix& m);

	/// the matrix data
 	double matrix[4][4];
	///
	static const MMatrix identity;

protected:
// No protected members

private:
	static const char* className();
};

#ifdef _WIN32
#pragma warning(default: 4522)
#endif // _WIN32

inline double& MMatrix::operator()(unsigned int row, unsigned int col )
{
	return matrix[row][col];
}

inline double MMatrix::operator()(unsigned int row, unsigned int col ) const
{
	return matrix[row][col];
}

inline double* MMatrix::operator[]( unsigned int row )
{
	return matrix[row];
}

inline const double* MMatrix::operator[]( unsigned int row ) const
{
	return matrix[row];
}

// *****************************************************************************
#endif /* __cplusplus */
#endif /* _MMatrix */
