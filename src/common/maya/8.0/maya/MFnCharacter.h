
#ifndef _MFnCharacter
#define _MFnCharacter
//
//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc., and/or its licensors.  All 
// rights reserved.
// 
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors,  which is protected by U.S. and Canadian federal copyright law 
// and by international treaties.
// 
// The Data may not be disclosed or distributed to third parties or be 
// copied or duplicated, in whole or in part, without the prior written 
// consent of Autodesk.
// 
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the following 
// disclaimer, must be included in all copies of the Software, in whole 
// or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object 
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO 
// EVENT WILL AUTODESK AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST 
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR 
// CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS LICENSORS HAS 
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES. 
// ==========================================================================
//+
//
// CLASS:    MFnCharacter
//
// *****************************************************************************
//
// CLASS DESCRIPTION (MFnCharacter)
//
//  MFnCharacter is the function set that is used for manipulating characters.
//  Characters in Maya are dependency nodes used to manage any set of keyable
//  attributes. The attributes contained in a character can be manipulated
//  using clips, scheduled in a nonlinear manner by a clipScheduler node.
//
// *****************************************************************************

#if defined __cplusplus

// *****************************************************************************

// INCLUDED HEADER FILES


#include <maya/MString.h>
#include <maya/MFnSet.h>
#include <maya/MObject.h>

// *****************************************************************************

// DECLARATIONS

class MObjectArray;
class MSelectionList;
class MDagPath;
class TsetCmd;
class Tstring;
class MDGModifier;

// *****************************************************************************

// CLASS DECLARATION (MFnCharacter)

/// Function Set for Characters
/**
    Function set for characters
*/
#ifdef _WIN32
#pragma warning(disable: 4522)
#endif // _WIN32

class OPENMAYAANIM_EXPORT MFnCharacter : public MFnSet
{
	declareMFn(MFnCharacter, MFnSet);

public:
	///
	MStatus		attachSourceToCharacter( MObject& sourceClip,
										 MDGModifier& dgMod);
	///
	MStatus		attachInstanceToCharacter( MObject& instanceClip,
										   MDGModifier& dgMod);
	///
	MStatus		addCurveToClip( MObject& curve,
								MObject& sourceClip,
								MPlug& characterPlug,
								MDGModifier& dgMod);
	///
	MObject		createBlend( MObject& instancedClip1,
							 MObject& instancedClip2,
							 MObject& blendAnimCurve,
							 MDGModifier& dgMod,
							 MStatus *ReturnStatus = NULL);
	///
	bool		blendExists(MObject& instancedClip1,
							MObject& instancedClip2,
							MObject& blendResult);
	///
	bool		removeBlend(MObject& instancedClip1,
							MObject& instancedClip2,
							MDGModifier& dgMod,
							MStatus* ReturnStatus = NULL);

	///
	bool	getCharacterThatOwnsPlug(MPlug& plug, MObject& result) const;
	///
	MStatus getMemberPlugs(MPlugArray& result) const;
	///
	MStatus getSubCharacters(MSelectionList& result) const;
	///
	MObject getClipScheduler(MStatus * ReturnStatus = NULL);
	///
	int 	getScheduledClipCount(MStatus * ReturnStatus = NULL);
	///
	MObject	getScheduledClip(int index, MStatus * ReturnStatus = NULL);
	///
	int 	getSourceClipCount(MStatus * ReturnStatus = NULL);
	///
	MObject	getSourceClip(int index, MStatus * ReturnStatus = NULL);
	///
    int		getBlendCount(MStatus * ReturnStatus = NULL);
	///
    MObject getBlend(int index, MStatus * ReturnStatus = NULL);
	///
    MStatus getBlendClips(int index, MObject& clip1, MObject& clip2);

protected:
	virtual		Tstring setCommandString();
	virtual		TsetCmd* setCommand();
private:
// No private members
};

#ifdef _WIN32
#pragma warning(default: 4522)
#endif // _WIN32

// *****************************************************************************
#endif /* __cplusplus */
#endif /* _MFnCharacter */
